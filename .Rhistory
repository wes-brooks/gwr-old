require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(RCurl)
registerCores(n=2)
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
year = as.character(yr)
df = pov2[pov2$year==yr,]
####Produce the models via lasso and via elastic net:
#Define which variables we'll use as predictors of poverty:
#predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(spgwr)
registerCores(n=2)
require(RCurl)
#Import the data
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
#Establish lists to hold the bandwidths
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
year = as.character(yr)
df = pov2[pov2$year==yr,]
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
#Import external libraries
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(spgwr)
registerCores(n=2)
require(RCurl)
#Import the data
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
#Establish lists to hold the bandwidths
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
year = as.character(yr)
df = pov2[pov2$year==yr,]
####Produce the models via lasso and via elastic net:
#Define which variables we'll use as predictors of poverty:
#predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
?sweep
Y=as.matrix(df$logitindpov)
Y
X = as.matrix(df[,predictors])
sweep(X, 2, Y, '-')
X-y
X-Y
y=as.vector(Y)
y
sweep(X, 2, y, '-')
dim(X)
dim(X)[2]
apply(X, 2, print)
dim(X)
head(X)
apply(X, 2, nop)
noop
pass
continue
sweep(X, 1, y, '-')
X[,6]-y
sweep(X, 1, Y, '-')
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(spgwr)
registerCores(n=2)
require(RCurl)
#Import the data
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
#Establish lists to hold the bandwidths
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
#Isolate one year of data
year = as.character(yr)
df = pov2[pov2$year==yr,]
####Produce the models via lasso and via elastic net:
#Define which variables we'll use as predictors of poverty:
#predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
test()
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(spgwr)
registerCores(n=2)
require(RCurl)
#Import the data
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
#Establish lists to hold the bandwidths
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
year = as.character(yr)
df = pov2[pov2$year==yr,]
####Produce the models via lasso and via elastic net:
#Define which variables we'll use as predictors of poverty:
#predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(RCurl)
#Import the data
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
#Establish lists to hold the bandwidths
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
year = as.character(yr)
df = pov2[pov2$year==yr,]
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
detach('package:gwselect', unload=TRUE)
require(gwselect)
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
AIC + 2*df*(df-1)/(sum(w) - df - 1)
2*df*(df-1)/(sum(w) - df - 1)
df
require(devtools)
install_github('agLasso', 'wesesque')
require(agLasso)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
require(RCurl)
#Import the data
source_url('https://raw.github.com/wesesque/gwr/master/code/poverty/poverty-data.r')
#Establish lists to hold the bandwidths
bw = list()
bw[['GWEN']] = list()
bw[['GWAL']] = list()
bw[['GWR']] = list()
#Establish lists to hold the models
model = list()
model[['GWEN']] = list()
model[['GWAL']] = list()
model[['GWR']] = list()
years = c(1960, 1970, 1980, 1990, 2000, 2006)
years = c(1970)
yr=1970
year = as.character(yr)
df = pov2[pov2$year==yr,]
####Produce the models via lasso and via elastic net:
#Define which variables we'll use as predictors of poverty:
#predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof')
f = as.formula(paste("logitindpov ~ -1 + ", paste(predictors, collapse="+"), sep=""))
#Lasso model
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
detach("package:gwselect", unload=TRUE)
install_github('gwselect', 'wesesque', ref='agLasso')
require(gwselect)
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
detach("package:agLasso", unload=TRUE)
install_github('agLasso', 'wesesque')
install_github('agLasso', 'wesesque')
require(agLasso)
bw[['GWAL']][[year]] = gwglmnet.sel(formula=f, data=df, family='gaussian', alpha=1, coords=df[,c('x','y')], longlat=TRUE, mode.select='AICc', gweight=spherical, tol.bw=0.01, bw.method='knn', parallel=FALSE, interact=TRUE, verbose=TRUE, shrunk.fit=FALSE, bw.select='AICc', resid.type='pearson')
library(geoR)
B = 100
N = 30
coord = seq(0, 1, length.out=N)
#Establish the simulation parameters
#tau = rep(c(0.03, 0.1), each=9)
tau = rep(c(0, 0.1), each=9)
rho = rep(rep(c(0, 0.5, 0.8), each=3), times=2)
sigma.tau = rep(c(0, 0.03, 0.1), times=6)
b = 25
#B1 = matrix(rep(ifelse(coord<=0.4, 0, ifelse(coord<0.6,5*(coord-0.4),1)), N), N, N)
B1 = matrix(rep(coord, N), N, N)
params = data.frame(tau, rho, sigma.tau)
#Read command-line parameters
#args = commandArgs(trailingOnly=TRUE)
#cluster = as.integer(args[1])
#process = as.integer(args[2])
cluster=NA
process=2
#Simulation parameters are based on the value of process
setting = process %/% B + 1
parameters = params[setting,]
#Get two (independent) Gaussian random fields:
set.seed(seeds[process+1])
d1 = grf(n=N**2, grid='reg', cov.model='exponential', cov.pars=c(1,parameters[['tau']]))
d2 = grf(n=N**2, grid='reg', cov.model='exponential', cov.pars=c(1,parameters[['tau']]))
d3 = grf(n=N**2, grid='reg', cov.model='exponential', cov.pars=c(1,parameters[['tau']]))
d4 = grf(n=N**2, grid='reg', cov.model='exponential', cov.pars=c(1,parameters[['tau']]))
d5 = grf(n=N**2, grid='reg', cov.model='exponential', cov.pars=c(1,parameters[['tau']]))
loc.x = d1$coords[,1]
loc.y = d1$coords[,2]
#Use the Cholesky decomposition to correlate the random fields:
S = matrix(parameters[['rho']], 5, 5)
diag(S) = rep(1, 5)
L = chol(S)
#Force correlation on the Gaussian random fields:
D = as.matrix(cbind(d1$data, d2$data, d3$data, d4$data, d5$data)) %*% L
#
X1 = matrix(D[,1], N, N)
X2 = matrix(D[,2], N, N)
X3 = matrix(D[,3], N, N)
X4 = matrix(D[,4], N, N)
X5 = matrix(D[,5], N, N)
if (parameters[['sigma.tau']] == 0) {epsilon = rnorm(N**2, mean=0, sd=1)}
if (parameters[['sigma.tau']] > 0) {epsilon = grf(n=N**2, grid='reg', cov.model='exponential', cov.pars=c(1,parameters[['sigma.tau']]))$data}
#
mu = X1*B1
Y = mu + epsilon
sim = data.frame(Y=as.vector(Y), X1=as.vector(X1), X2=as.vector(X2), X3=as.vector(X3), X4=as.vector(X4), X5=as.vector(X5), loc.x, loc.y)
fitloc = cbind(rep(seq(0,1, length.out=N), each=N), rep(seq(0,1, length.out=N), times=N))
vars = as.vector(B1!=0)
oracle = list()
for (i in 1:N**2) {
if (vars[i]) {
oracle[[i]] = c("X1")
} else {
oracle[[i]] = character(0)
}
}
X = sim[,c('X1','X2','X3','X4','X5')]
Y=sim$Y
coords=sim[,c('loc.x','loc.y')]
Xmat = matrix(rep(coords[,1], times=n), n, n)
Ymat = matrix(rep(coords[,2], times=n), n, n)
D = sqrt((Xmat-t(Xmat))**2 + (Ymat-t(Ymat))**2)
n=900
Xmat = matrix(rep(coords[,1], times=n), n, n)
Ymat = matrix(rep(coords[,2], times=n), n, n)
D = sqrt((Xmat-t(Xmat))**2 + (Ymat-t(Ymat))**2)
weight.matrix=spherical(D,0.4)
B1
B1[450]
B1[435]
B1[436]
w=weight.matrix[436,]
w
weighted = which(w>0)
weighted
X = X[weighted,]
Y=Y[weighted]
w=w[weighted]
dim(X)
dim(Y)
length(Y)
groups=0:4
agLasso(x=X, y=Y, w=w, groups=groups)
agLasso_R(x=X, y=Y, w=w, groups=groups)
require(agLasso)
agLasso_r
agLasso_R
aglasso_R(x=X, y=Y, w=w, groups=groups)
aglasso_R(x=X, y=Y, w=w, groups=groups) ->mm
which.min(mm[['AICc']])
mm[['coefs']][,23]
coords
coords= coords[weighted,]
sweep(coords, 2, c(0.51724138, 0.48275862), '-')
X%*%sweep(coords, 2, c(0.51724138, 0.48275862), '-')
as.matrix(X)%*% as.matrix(sweep(coords, 2, c(0.51724138, 0.48275862), '-'))
sweep(X, 1, sweep(coords, 2, c(0.51724138, 0.48275862), '-'), '*')
dim(X)
dim(coords)
sweep(X, 1, sweep(coords, 2, c(0.51724138, 0.48275862), '-')[,1], '*')
X = cbind(X, sweep(X, 1, sweep(coords, 2, c(0.51724138, 0.48275862), '-')[,1], '*'), sweep(X, 1, sweep(coords, 2, c(0.51724138, 0.48275862), '-')[,2], '*'))
groups = rep(groups, 3)
groups
aglasso_R(x=X, y=Y, w=w, groups=groups) ->mm
mm[['AICc']]
which.min(AICc)
which.min(mm[['AICc']])
mm[['coefs']]
u=seq(-2,2,length.out=100)
p = ifelse(u<1/2, (u*(1-u))**(1/2), 1/2)
u=seq(0,2,length.out=100)
p = ifelse(u<1/2, (u*(1-u))**(1/2), 1/2)
plot(u,p, type='l')
u=seq(0,1,length.out=100)
p = ifelse(u<1/2, (u*(1-u))**(1/2), 1/2)
plot(u,p, type='l')
u=seq(0,1,length.out=1000)
p = ifelse(u<1/2, (u*(1-u))**(1/2), 1/2)
plot(u,p, type='l')
pp = c(0)
for(i in 2:length(p)) {pp = p[i]-p[i-1]}
pp
pp = c(0)
for(i in 2:length(p)) {pp = c(pp,p[i]-p[i-1])}
pp
pp = c(0)
for(i in 2:length(p)) {pp = c(pp,(p[i]-p[i-1])/(u[i]-u[i-1]))}
pp
pp = c(0)
for(i in 2:length(p)) {pp = c(pp,(p[i]-p[i-1])}
for(i in 2:length(p)) {pp = c(pp,(p[i]-p[i-1]))}
pp
qq = log(1/u)**(1/2)*pp
qq
qq[0]=0
cumsum(qq)
qq
qq[1]=0
cumsum(qq)
plot(cumsum(qq))
