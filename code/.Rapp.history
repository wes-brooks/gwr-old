unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massacusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c('county', 'parish', 'precinct', 'ward', 'borough', 'county/city', 'county/town', 'city', 'municipio', 'census area', 'borough/municipality', 'borough/city')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=colorBins))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
unemp$county
mapcounties$county
unique(mapcounties$county)
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massacusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c('county', 'parish', 'precinct', 'ward', 'borough', 'county/city', 'county/town', 'city', 'municipio', 'census area', 'borough/municipality', 'borough/city')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    locality[[i]][1] = sub("['.]", '', locality[[i]][1])#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]
unemp$county
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massacusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c('county', 'parish', 'precinct', 'ward', 'borough', 'county/city', 'county/town', 'city', 'municipio', 'census area', 'borough/municipality', 'borough/city')
locality
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')
locality
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massacusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c( 'county/city', 'county/town', 'borough/municipality', 'borough/city', 'county', 'parish', 'precinct', 'ward', 'borough', 'city', 'municipio', 'census area')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    locality[[i]][1] = sub("['.]", '', locality[[i]][1])#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=colorBins))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=colorBins))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=colorBins))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
states[['ma']]
unemp$county
which(unemp$unemployment<=breaks)
breaks = c(2, 4, 6, 8, 10)
which(unemp$unemployment<=breaks)
bin = vector()#
breaks = c(2, 4, 6, 8, 10)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}
bin
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}
bin
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$colorBins = bin
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$colorBins = bin
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=colorBins))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
unemp$colorBins = colors[bin]
unemp$color = colors[bin]
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massachusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c( 'county/city', 'county/town', 'borough/municipality', 'borough/city', 'county', 'parish', 'precinct', 'ward', 'borough', 'city', 'municipio', 'census area')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    locality[[i]][1] = sub("['.]", '', locality[[i]][1])#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#define color buckets#
colors = c("#980043", "#DD1C77", "#DF65B0", "#C994C7", "#D4B9DA", "#F1EEF6")#
#
#unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
bin
sum(bin==1)
sum(bin==2)
sum(bin==3)
sum(bin==4)
sum(bin==5)
sum(bin==6)
sum(bin==7)
sum(unemp$unemployment<=2)
sum(unemp$unemployment<=4)
sum(unemp$unemployment<=6)
sum(unemp$unemployment<=8)
sum(unemp$unemployment<=10)
sum(unemp$unemployment<=100)
which(breaks >= unemp$unemployment[i])
which(breaks >= unemp$unemployment[10])
which(breaks >= unemp$unemployment[100])
which(breaks >= unemp$unemployment[200])
which(breaks >= unemp$unemployment[250])
unemp$unemployment$200
unemp$unemployment[200[]
unemp$unemployment[200]
unemp$unemployment[200]
unemp$unemployment[250]
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massachusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c( 'county/city', 'county/town', 'borough/municipality', 'borough/city', 'county', 'parish', 'precinct', 'ward', 'borough', 'city', 'municipio', 'census area')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    locality[[i]][1] = sub("['.]", '', locality[[i]][1])#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
#unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]#
#define color buckets#
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(subregion, region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
unemp$unemployment[1]
unemp$unemployment[2]
unemp$color[1]
unemp$county[1]
unique(mapcounties$county)
?gsub
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massachusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c( 'county/city', 'county/town', 'borough/municipality', 'borough/city', 'county', 'parish', 'precinct', 'ward', 'borough', 'city', 'municipio', 'census area')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    locality[[i]][1] = gsub("(miami-)['. ]", '', locality[[i]][1])#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
#unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]#
#define color buckets#
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(gsub("(miami-)['. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
unemp$county
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massachusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c( 'county/city', 'county/town', 'borough/municipality', 'borough/city', 'county', 'parish', 'precinct', 'ward', 'borough', 'city', 'municipio', 'census area')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    locality[[i]][1] = gsub("(miami)?['-. ]", '', locality[[i]][1])#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(paste(' ', descriptors[j], sep=''), '', locality[[i]][1])#
    }#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
#unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]#
#define color buckets#
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(gsub("(miami)?['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
unique(mapcounties$county)
unique(unemp$county)
unemp = read.csv("../data/unemployment09.csv", header=FALSE)#
abbrevs = list('alabama'='al', 'alaska'='ak', 'arizona'='az', 'arkansas'='ar', 'california'='ca', 'colorado'='co', 'connecticut'='ct', 'delaware'='de', 'florida'='fl', 'georgia'='ga', 'hawaii'='hi', 'idaho'='id', 'illinois'='il', 'indiana'='in', 'iowa'='ia', 'kansas'='ks', 'kentucky'='ky', 'louisiana'='la', 'maine'='me', 'maryland'='md', 'massachusetts'='ma', 'michigan'='mi', 'minnesota'='mn', 'mississippi'='ms', 'missouri'='mo', 'montana'='mt', 'nebraska'='ne', 'nevada'='nv', 'new hampshire'='nh', 'new jersey'='nj', 'new mexico'='nm', 'new york'='ny', 'north carolina'='nc', 'north dakota'='nd', 'ohio'='oh', 'oklahoma'='ok', 'oregon'='or', 'pennsylvania'='pa', 'rhode island'='ri', 'south carolina'='sc', 'south dakota'='sd', 'tennessee'='tn', 'texas'='tx', 'utah'='ut', 'vermont'='vt', 'virginia'='va', 'washington'='wa', 'west virginia'='wv', 'wisconsin'='wi', 'wyoming'='wy', 'puerto rico'='pr', 'columbia'='dc')#
states = as.vector(names(abbrevs), mode='list')#
names(states) = as.vector(unlist(abbrevs))#
descriptors = c( 'county/city', 'county/town', 'borough/municipality', 'borough/city', 'county', 'parish', 'precinct', 'ward', 'borough', 'city', 'municipio', 'census area')#
#
pop1 = vector()#
pop2 = vector()#
pop3 = vector()#
for (i in 1:dim(unemp)[1]) {#
    pop1 = c(pop1, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V6[i])), ',')[[1]], collapse='')))#
    pop2 = c(pop2, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V7[i])), ',')[[1]], collapse='')))#
    pop3 = c(pop3, as.numeric(paste(strsplit(sub("[[:blank:]]+$", "", as.character(unemp$V8[i])), ',')[[1]], collapse='')))#
}#
unemp$V6 = pop1#
unemp$V7 = pop2#
unemp$V8 = pop3#
#
names(unemp) = c("LAUS", 'stateid', 'countyid', 'county', 'year', '2009 population', '2000 population', 'population change', 'unemployment')#
unemp$year = as.numeric(unemp$year) #
unemp$county = as.character(unemp$county)#
locality =  strsplit(tolower(unemp$county), ', ')#
for (i in 1:length(locality)) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    locality[[i]][1] = gsub("(miami)?['-. ]", '', locality[[i]][1])#
    unemp$county[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}#
unemp$stateid = as.factor(unemp$stateid)#
unemp$countyid = as.factor(unemp$countyid)#
#
#unemp$colorBins = colors[ceiling(length(colors)*rank(-unemp$unemployment)/dim(unemp)[1])]#
#define color buckets#
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(gsub("(miami)?['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
sum(unemp$color=="#F1EEF6")
ggplot2like(n = 4, h.start = 0, l = 65)$superpose.line#
> $col
ggplot2like(n = 4, h.start = 0, l = 65)$superpose.line$col
ggplot2like(n = 4, h.start = 0, l = 65)$superpose.line
define color buckets#
colors = c("#980043", "#DD1C77", "#DF65B0", "#C994C7", "#D4B9DA", "#F1EEF6")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(gsub("(miami)?['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
define color buckets#
colors = c("#980043", "#DD1C77", "#DF65B0", "#C994C7", "#D4B9DA", "#F1EEF6")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(gsub("(miami)?['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(2, 4, 6, 8, 10, 100)#
for (i in 1:dim(unemp)[1]) {#
    bin = c(bin, min(which(breaks >= unemp$unemployment[i])))#
}#
unemp$color = colors[bin]#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#merge data with ggplot county coordinates#
mapcounties$county <- with(mapcounties , paste(gsub("(miami)?['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, unemp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = mapstates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = mapcounties, colour = "white", size = .5, alpha = .1)#
map
library(maptools)#
## map data from http://www.census.gov/geo/www/cob/co2000.html#
state.map <- readShapeSpatial("maps/st99_d00_shp/st99_d00.shp")#
county.map <- readShapeSpatial("maps/co99_d00_shp/co99_d00.shp")
install.pacakages('maptools')
install.packages('maptools')
library(maptools)#
## map data from http://www.census.gov/geo/www/cob/co2000.html#
state.map <- readShapeSpatial("maps/st99_d00_shp/st99_d00.shp")#
county.map <- readShapeSpatial("maps/co99_d00_shp/co99_d00.shp")
library(spgwr)#
library(lars)#
#
#Import the plotting functions:#
setwd("~/git/gwr/code")#
source("utils.r")#
#
#Import poverty data#
pov = read.csv("~/git/gwr/data/upMidWestpov_Iowa_cluster_names.csv", header=TRUE)#
years = c('60', '70', '80', '90', '00', '06')#
column.map = list(pindpov='proportion individuals in poverty', #
    logitindpov='logit( proportion individuals in poverty )', pag='pag', pex='pex', pman='pman', #
    pserve='pserve', potprof='potprof', pwh='proportion white', pblk='proportion black', pind='pind',#
    phisp='proportion hispanic', metro='metro', pfampov='proportion families in poverty',#
    logitfampov='logit( proportion families in poverty)', pfire='pfire')#
#
#Process the poverty data so that each column appears only once and the year is added as a column.#
pov2 = list()#
for (column.name in names(column.map)) {#
    col = vector()#
    for (year in years) {#
        if (paste(column.name, year, sep="") %in% names(pov)) {#
            indx = which(names(pov)==paste(column.name, year, sep=""))#
            col = c(col, pov[,indx])#
        }#
        else { col = c(col, rep(NA, dim(pov)[1])) }#
    }#
    pov2[[column.name]] = col#
}#
#
#Find the columns we haven't yet matched:#
"%w/o%" <- function(x, y) x[!x %in% y]#
missed = names(pov) %w/o% outer(names(column.map), years, FUN=function(x, y) {paste(x, y, sep="")})#
#
for (column.name in missed) {#
    col = rep(pov[,column.name], length(years))#
    pov2[[column.name]] = col#
}#
#
#Add the year column to the pov2 data list.#
pov2[['year']] = vector()#
for (year in years) {#
    pov2[['year']] = c(pov2[['year']], rep(year, dim(pov)[1]))#
}#
#
#Convert pov2 from a list to a data frame:#
pov2 = data.frame(pov2)#
#
#Correct the Y2K bug#
pov2 = within(pov2, year <- as.numeric(as.character(year)) + 1900)#
pov2 = within(pov2, year <- ifelse(year<1960, year+100, year))
install.pacakages('spgwr')
install.packages('spgwr')
library('spgwr')
str(pov2)
pov2[1:100,]
pov2[1:100,16:22]
pov2[1:80,16:22]
pov2[1:60,16:22]
pov2[1:55,16:22]
pov2[100:155,16:22]
library(spgwr)#
library(lars)#
#
#Import the plotting functions:#
setwd("~/git/gwr/code")#
source("utils.r")#
#
#Import poverty data#
pov = read.csv("~/git/gwr/data/upMidWestpov_Iowa_cluster_names.csv", header=TRUE)#
years = c('60', '70', '80', '90', '00', '06')#
column.map = list(pindpov='proportion individuals in poverty', #
    logitindpov='logit( proportion individuals in poverty )', pag='pag', pex='pex', pman='pman', #
    pserve='pserve', potprof='potprof', pwh='proportion white', pblk='proportion black', pind='pind',#
    phisp='proportion hispanic', metro='metro', pfampov='proportion families in poverty',#
    logitfampov='logit( proportion families in poverty)', pfire='pfire')#
#
#Process the poverty data so that each column appears only once and the year is added as a column.#
pov2 = list()#
for (column.name in names(column.map)) {#
    col = vector()#
    for (year in years) {#
        if (paste(column.name, year, sep="") %in% names(pov)) {#
            indx = which(names(pov)==paste(column.name, year, sep=""))#
            col = c(col, pov[,indx])#
        }#
        else { col = c(col, rep(NA, dim(pov)[1])) }#
    }#
    pov2[[column.name]] = col#
}#
#
#Find the columns we haven't yet matched:#
"%w/o%" <- function(x, y) x[!x %in% y]#
missed = names(pov) %w/o% outer(names(column.map), years, FUN=function(x, y) {paste(x, y, sep="")})#
#
for (column.name in missed) {#
    col = rep(pov[,column.name], length(years))#
    pov2[[column.name]] = col#
}#
#
#Add the year column to the pov2 data list.#
pov2[['year']] = vector()#
for (year in years) {#
    pov2[['year']] = c(pov2[['year']], rep(year, dim(pov)[1]))#
}#
#
#Convert pov2 from a list to a data frame:#
pov2 = data.frame(pov2)#
#
#Correct the Y2K bug#
pov2 = within(pov2, year <- as.numeric(as.character(year)) + 1900)#
pov2 = within(pov2, year <- ifelse(year<1960, year+100, year))#
#Limit the data to just 100 points for now for computational reasons#
pov2006 = pov2[pov2$year==2006,]#
df = pov2006
pov2006
library(maps)
?maops
?maps
unique(pov2006$state)
unique(levels(pov2006$state))
unique(labels(pov2006$state))
unique(as.character(pov2006$state))
unique(pov2006$STATe)
unique(pov2006$STATE)
unique(as.character(pov2006$STATE))
unique(tolower(as.character(pov2006$STATE)))
midweststates = mapstates[tolower(mapstates$state) %in% unique(tolower(as.character(pov2006$STATE))),]
midweststates
str(mapstates)
midweststates = mapstates[tolower(mapstates$region) %in% unique(tolower(as.character(pov2006$STATE))),]
str(mapstates)
midweststates
midwestcounties = mapstates[tolower(mapcounties$region) %in% unique(tolower(as.character(pov2006$STATE))),]
midwestcounties = mapcounties[tolower(mapcounties$region) %in% unique(tolower(as.character(pov2006$STATE))),]
str(midwestcounties)
str(pov2006)
locality =  strsplit(tolower(pov2006$COUNTY), ', ')#
for (i in 1:length(locality)) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    locality[[i]][1] = gsub("(miami)?['-. ]", '', locality[[i]][1])#
    pov2006$COUNTY[i] = paste(locality[[i]][1], states[[locality[[i]][2]]], sep=',')#
}
str(pov2006)
library(spgwr)#
library(lars)#
library(maps)#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#Import the plotting functions:#
setwd("~/git/gwr/code")#
source("utils.r")#
#
#Import poverty data#
pov = read.csv("~/git/gwr/data/upMidWestpov_Iowa_cluster_names.csv", header=TRUE)#
years = c('60', '70', '80', '90', '00', '06')#
column.map = list(pindpov='proportion individuals in poverty', #
    logitindpov='logit( proportion individuals in poverty )', pag='pag', pex='pex', pman='pman', #
    pserve='pserve', potprof='potprof', pwh='proportion white', pblk='proportion black', pind='pind',#
    phisp='proportion hispanic', metro='metro', pfampov='proportion families in poverty',#
    logitfampov='logit( proportion families in poverty)', pfire='pfire')#
#
#Process the poverty data so that each column appears only once and the year is added as a column.#
pov2 = list()#
for (column.name in names(column.map)) {#
    col = vector()#
    for (year in years) {#
        if (paste(column.name, year, sep="") %in% names(pov)) {#
            indx = which(names(pov)==paste(column.name, year, sep=""))#
            col = c(col, pov[,indx])#
        }#
        else { col = c(col, rep(NA, dim(pov)[1])) }#
    }#
    pov2[[column.name]] = col#
}#
#
#Find the columns we haven't yet matched:#
"%w/o%" <- function(x, y) x[!x %in% y]#
missed = names(pov) %w/o% outer(names(column.map), years, FUN=function(x, y) {paste(x, y, sep="")})#
#
for (column.name in missed) {#
    col = rep(pov[,column.name], length(years))#
    pov2[[column.name]] = col#
}#
#
#Add the year column to the pov2 data list.#
pov2[['year']] = vector()#
for (year in years) {#
    pov2[['year']] = c(pov2[['year']], rep(year, dim(pov)[1]))#
}#
#
#Convert pov2 from a list to a data frame:#
pov2 = data.frame(pov2)#
#
#Correct the Y2K bug#
pov2 = within(pov2, year <- as.numeric(as.character(year)) + 1900)#
pov2 = within(pov2, year <- ifelse(year<1960, year+100, year))#
#Limit the data to just 100 points for now for computational reasons#
pov2006 = pov2[pov2$year==2006,]#
df = pov2006
cty = vector()
locality =  strsplit(tolower(pov2006$COUNTY), ', ')#
for (i in 1:length(locality)) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    locality[[i]][1] = gsub("(miami)?['-. ]", '', locality[[i]][1])#
    cty = c(cty, paste(locality[[i]][1], states[[locality[[i]][2]]], sep=','))#
}
cty
locality
df
tolower(df$STATE)
locality =  strsplit(tolower(pov2006$COUNTY), ', ')#
for (i in 1:length(locality)) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    locality[[i]][1] = gsub("(miami)?['-. ]", '', locality[[i]][1])#
    cty = c(cty, paste(locality[[i]][1], tolower(df$STATE[i]), sep=','))#
}
cty
cty=vector()
locality =  strsplit(tolower(pov2006$COUNTY), ', ')#
for (i in 1:length(locality)) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    locality[[i]][1] = gsub("(miami)?['-. ]", '', locality[[i]][1])#
    cty = c(cty, paste(locality[[i]][1], tolower(df$STATE[i]), sep=','))#
}
df$county = cty
merge(midwestcounties, df, by.x='county', by.y='county')
midwestmerge = merge(midwestcounties, df, by.x='county', by.y='county')
str(midwestmerge)
df$color = colors[ceiling(length(colors)*rank(-df$logitindpov)/dim(df)[1])]
midwestmerge = merge(midwestcounties, df, by.x='county', by.y='county')
draw map#
map <- ggplot(midwestmerge, aes(long,lat,group=county)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
draw map#
map <- ggplot(midwestmerge, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
midwestmerge <- midwestmerge[order(midwestmerge$group, midwestmerge$order),]
draw map#
map <- ggplot(midwestmerge, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
unique(cty)
df[1:55,]
Limit the data to just 100 points for now for computational reasons#
pov2006 = pov2[pov2$year==2006,]#
df = pov2006#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.05, 0.10, 0.15, 0.20, 0.25, 1.00)#
for (i in 1:dim(df)[1]) {#
    bin = c(bin, min(which(breaks >= df$pindpov[i])))#
}#
df$color = colors[bin]
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df$STATE),]#
midwestcounties = mapcounties[tolower(mapstates$region) %in% tolower(df$STATE),]
midweststates
define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.05, 0.10, 0.15, 0.20, 0.25, 1.00)#
for (i in 1:dim(df)[1]) {#
    bin = c(bin, min(which(breaks >= df$pindpov[i])))#
}#
df$color = colors[bin]#
df$county = tolower(as.character(df$COUNTY))#
for (i in 1:dim(df)[1]) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    county = gsub("['-. ]", '', df$county[i])#
    df$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df$STATE),]#
midwestcounties = mapcounties[tolower(mapstates$region) %in% tolower(df$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(mapcounties, df, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Limit the data to just 100 points for now for computational reasons#
pov2006 = pov2[pov2$year==2006,]#
df = pov2006#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.05, 0.10, 0.15, 0.20, 0.25, 1.00)#
for (i in 1:dim(df)[1]) {#
    bin = c(bin, min(which(breaks >= df$pindpov[i])))#
}#
df$color = colors[bin]#
df$county = tolower(as.character(df$COUNTY))#
for (i in 1:dim(df)[1]) {#
    for (j in 1:length(descriptors)) {#
        locality[[i]][1] = sub(descriptors[j], '', locality[[i]][1])#
    }#
    county = gsub("['-. ]", '', df$county[i])#
    df$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df$STATE),]#
midwestcounties = mapcounties[tolower(mapstates$region) %in% tolower(df$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
df
mergedata
str(mergedata)
mergedata$county7
mergedata$county
unique(mergedata$county)
df$county
unique(midwestcounties$county)
mapstates$region
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df$STATE),]
define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.05, 0.10, 0.15, 0.20, 0.25, 1.00)#
for (i in 1:dim(df)[1]) {#
    bin = c(bin, min(which(breaks >= df$pindpov[i])))#
}#
df$color = colors[bin]#
df$county = tolower(as.character(df$COUNTY))#
for (i in 1:dim(df)[1]) {#
    county = gsub("['-. ]", '', df$county[i])#
    df$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Define a grid of locations where we'll fit a GWR model:#
n=20#
xx = as.vector(quantile(df$x, 1:n/(n+1)))#
yy = as.vector(quantile(df$y, 1:n/(n+1)))#
locs = cbind(x=rep(xx,each=n), y=rep(yy,times=n))#
#
#Use this trick to compute the matrix of distances very quickly#
n = dim(pov3)[1]#
D1 = matrix(rep(pov3$x,n), n,n)#
D2 = matrix(rep(pov3$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=3)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
#
for(i in 1:dim(df)[1]) {#
    w = D[i,-i]#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    cv_error = rbind(cv_error, df$logitindpov[i] - predict(w.lasso.geo[[i]], newx=df[i,predictors], type='fit', mode='lambda', s=lambda)$fit)#
#
    print(i)#
}#
#
names(cv_error) = lambda#
#
er = vector()#
for (k in 1:dim(cv_error)[2]) {#
    er = c(er, sum((cv_error**2)[k]))#
    cat(paste(names(cv_error)[k], ": ", sum((cv_error**2)[k]), "\n", sep=""))#
}
Define a grid of locations where we'll fit a GWR model:#
n=20#
xx = as.vector(quantile(df$x, 1:n/(n+1)))#
yy = as.vector(quantile(df$y, 1:n/(n+1)))#
locs = cbind(x=rep(xx,each=n), y=rep(yy,times=n))#
#
#Use this trick to compute the matrix of distances very quickly#
n = dim(pov3)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=3)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)
for (j in 1:dim(df)[1]) {#
    loodf = df[-j,]#
    looD = D[-j,-j]#
#
    ss = seq(0, 1, length.out=100)#
    w.lasso.geo[[j]] = list()#
    coefs[[j]] = list()#
    affected = which(w[j,] > 0)#
#
    for(i in affected) {    #
        model = lm(f, data=loodf, weights=w)#
        w.eig <- eigen(diag(w))#
        w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
        w.lasso.geo[[j]][[i]] = lars(x=w.sqrt %*% as.matrix(loodf[,predictors]), y=as.matrix(loodf$logitindpov))#
        for (col in predictors) {#
            coefs[[j]][[col]] = c(coefs[[j]][[col]], model$coef[[col]])#
        }        #
        print(i)#
    }    #
    print(j)#
}
bw=3
j=2
loodf = df[-j,]#
    looD = D[-j,-j]#
    w = bisquare(looD, bw=bw)
dim(w)
dim(D)
?predict.lars
Define a grid of locations where we'll fit a GWR model:#
n=20#
xx = as.vector(quantile(df$x, 1:n/(n+1)))#
yy = as.vector(quantile(df$y, 1:n/(n+1)))#
locs = cbind(x=rep(xx,each=n), y=rep(yy,times=n))#
#
#Use this trick to compute the matrix of distances very quickly#
n = dim(pov3)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=3)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    w = D[i,-i]#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(model, newx=df[i,], mode='lambda', s=lambda, type='fit'))#
    print(i)#
}
Use this trick to compute the matrix of distances very quickly#
n = dim(pov3)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=3)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    w = D[i,-i]#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(model, newx=df[i,], mode='lambda', s=lambda, type='fit')))#
    print(i)#
}
Use this trick to compute the matrix of distances very quickly#
n = dim(pov2006)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=3)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    w = D[i,-i]#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(model, newx=df[i,], mode='lambda', s=lambda, type='fit')))#
    print(i)#
}
for(i in 1:dim(df)[1]) {#
    w = D[i,-i]#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(model, newx=df[i,], type='fit', mode='lambda', s=lambda)))#
    print(i)#
}
i
w
bw=3#
for(i in 1:dim(df)[1]) {#
    w = bisquare(D[i,-i], bw=bw)#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(model, newx=df[i,], type='fit', mode='lambda', s=lambda)))#
    print(i)#
}
w
?predict.lars
lambda
predict(model, newx=df[i,], s=lambda, type='fit', mode='lambda')
ll = lambda
predict(model, newx=df[i,], s=ll, type='fit', mode='lambda')
predict(model, df[i,], ll, type='fit', mode='lambda')
model
Use this trick to compute the matrix of distances very quickly#
bw=3#
n = dim(pov2006)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=bw)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    w = w[i,-i]#
#
    model = lm(f, data=df[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(w.lasso.geo[[i]], newx=df[i,], s=lambda, type='fit', mode='lambda')))#
    print(i)#
}
i
dfi[i]
df[i,]
model.data = df[,predictors]#
model.data[['logitindpov']] = df[['logitindpov']]
model.dta[1:10,]
model.data[1:10,]
predict(w.lasso.geo[[i]], newx=model.data[i,], s=lambda, type='fit', mode='lambda')
model.data[i,]
w.lasso.geo[[i]]
summary(model)
model.data[i,-11]
predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')
predict(w.lasso.geo[[i]], newx=model.data[i,-'logitindpov'], s=lambda, type='fit', mode='lambda')
Use this trick to compute the matrix of distances very quickly#
bw=3#
n = dim(pov2006)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=bw)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
model.data = df[,predictors]#
model.data[['logitindpov']] = df[['logitindpov']]#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    w = w[i,-i]#
#
    model = lm(f, data=model.data[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')))#
    print(i)#
}
which.min(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda'))
predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')
predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']]
predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,11]
predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,'logitingdpov']
which.min(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,'logitingdpov'])
which.min(abs(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,'logitingdpov']))
which.min(abs(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,11]))
Use this trick to compute the matrix of distances very quickly#
bw=3#
n = dim(pov2006)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=bw)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
model.data = df[,predictors]#
model.data[['logitindpov']] = df[['logitindpov']]#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    w = w[i,-i]#
#
    model = lm(f, data=model.data[-i,], weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(abs(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,11]))/1000)#
    print(i)#
}
w
i
Use this trick to compute the matrix of distances very quickly#
bw=3#
n = dim(pov2006)[1]#
D1 = matrix(rep(pov2006$x,n), n,n)#
D2 = matrix(rep(pov2006$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
w = bisquare(D, bw=bw)#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
model.data = df[,predictors]#
model.data[['logitindpov']] = df[['logitindpov']]#
cv_error = data.frame()#
w.lasso.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 2, length.out=2000)#
l = vector()#
for(i in 1:dim(df)[1]) {#
    loow = w[i,-i]#
#
    model = lm(f, data=model.data[-i,], weights=loow)#
    w.eig <- eigen(diag(loow))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-i,predictors]), y=as.matrix(df$logitindpov[-i]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    l = c(l, which.min(abs(predict(w.lasso.geo[[i]], newx=model.data[i,-11], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[i,11]))/1000)#
    print(i)#
}
dim(model.data)
model.data$lambda=l
df$lambda = l
df$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df)[1]) {#
    bin = c(bin, min(which(breaks >= df$lambda[i])))#
}#
df$color = colors[bin]#
df$county = tolower(as.character(df$COUNTY))#
for (i in 1:dim(df)[1]) {#
    county = gsub("['-. ]", '', df$county[i])#
    df$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=color))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
w.lasso.geo[[4]]
?lars
str(df)
str(model.data)
model.data=model.data[,1:11]
str(model.data)
str(pov)
str(pov2)
Prepare something for plotting:#
output = vector()#
df.temp = df#
for (i in 1:dim(df)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,11], mode='lambda', s=1000*l[i])[['pblk']])#
}
output
summary(output)
Prepare something for plotting:#
output = vector()#
var = 'pblk'#
df.temp = df#
for (i in 1:dim(df)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]
draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=gradient(low='white', high='red', limits=c(0,2.5))))#
map <- map + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=c(0,2.5)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
names(df)
Prepare something for plotting:#
output = vector()#
var = 'pind'#
df.temp = df#
for (i in 1:dim(df)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=c(0,2.5)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
dim(model.data)
names(model.data)
Prepare something for plotting:#
output = vector()#
var = 'pind'#
df.temp = df#
for (i in 1:dim(df)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=c(0,2.5)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
df.temp[['output']]
names(df.temp)
names(df)
output
Prepare something for plotting:#
output = vector()#
var = 'pind'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}
i
model.data[i,-11]
w.lasso.geo[[i]]
coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])
coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[['pind']]
coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[['pag']]
Prepare something for plotting:#
output = vector()#
var = 'pag'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=c(0,2.5)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
output
Prepare something for plotting:#
output = vector()#
var = 'pag'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Prepare something for plotting:#
output = vector()#
var = 'pman'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
output
Prepare something for plotting:#
output = vector()#
var = 'metro'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Prepare something for plotting:#
output = vector()#
var = 'pserve'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Prepare something for plotting:#
output = vector()#
var = 'potprof'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Prepare something for plotting:#
output = vector()#
var = 'phisp'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
Prepare something for plotting:#
output = vector()#
var = 'pfire'#
df.temp = df#
for (i in 1:dim(df.temp)[1]) {#
    output = c(output, coef.lars(w.lasso.geo[[i]], newx=model.data[i,-11], mode='lambda', s=1000*l[i])[[var]])#
}#
df.temp$output = output#
df.temp$lambda = l#
#define color buckets#
colors = c("#980043", "#C994C7", "#D4B9DA", "#DD1C77", "#DF65B0", "#F1EEF6")#
#
bin = vector()#
breaks = c(0.1, 0.20, 0.3, 0.4, 0.5, 2.00)#
for (i in 1:dim(df.temp)[1]) {#
    bin = c(bin, min(which(breaks >= df.temp$lambda[i])))#
}#
df.temp$color = colors[bin]#
df.temp$county = tolower(as.character(df.temp$COUNTY))#
for (i in 1:dim(df.temp)[1]) {#
    county = gsub("['-. ]", '', df.temp$county[i])#
    df.temp$county[i] = paste(county, tolower(df$STATE[i]), sep=',')#
}#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#
#limit our view to the midwest:#
midweststates = mapstates[tolower(mapstates$region) %in% tolower(df.temp$STATE),]#
midwestcounties = mapcounties[tolower(mapcounties$region) %in% tolower(df.temp$STATE),]#
#
#merge data with ggplot county coordinates#
midwestcounties$county <- with(midwestcounties , paste(gsub("['-. ]", '', subregion), region, sep = ","))#
mergedata <- merge(midwestcounties, df.temp, by.x = "county", by.y = "county")#
mergedata <- mergedata[order(mergedata$group, mergedata$order),]#
#
#draw map#
map <- ggplot(mergedata, aes(long,lat,group=group)) + geom_polygon(aes(fill=output))#
map <- map + scale_fill_gradient(low='white', high='red', limits=range(output)) + #scale_fill_brewer(palette="PuRd") +#
    coord_map(project="globular") +#
    opts(legend.position = "none")#
#
map <- map + opts(panel.background = theme_rect(fill='green', colour='red'))#
#
#add state borders#
map <- map + geom_path(data = midweststates, colour = "white", size = .75)#
#
#add county borders#
map <- map + geom_path(data = midwestcounties, colour = "white", size = .5, alpha = .1)#
map
