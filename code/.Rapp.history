names(tps[['smooth']][[1]])
tps[['smooth']][[1]][['xt']]
tps[['smooth']][[1]]$xt
tps[['smooth']][[1]][['fixed']]
tps[['smooth']][[1]][['vn']]
tps[['smooth']][[1]][['S']]
names(tps[['smooth']][[1]])
names(tps)
names(tps[['smooth']][[1]])
tps[['smooth']][[1]][['Xu']]
cbind(rep(1,49),tps[['smooth']][[1]][['Xu']])
tps2 = gam(income ~ s(x, y, k-48))
tps2 = gam(income ~ s(x, y, k=48))
tps2 = gam(income ~ s(x, y, k=48, fixed=TRUE))
tps2 = gam(income ~ s(x, y, k=48))
tps2
tps
?lanczos
E = matrix(0, 49, 49)
for( i in 1:49){}
for( i in 1:49){
for(j in 1:49){
E[i,j]=eta(x[i], y[i], c(x[j],y[j]))
}}
E
eigen(E)
str(eigen(E))
T
T = cbind(1, x, y)#
U = eigen(E)[["vectors"]][,1:48]#
TU = t(T) %*% U
TU
dim(tps[['smooth']][[1]][['UZ']])
dim(tps[['smooth']][[1]][['S']])
tps[['smooth']][[1]][['S']]
S=tps[['smooth']][[1]][['S']]
t(S) %*% S
type(S)
typeof(S)
S = as.matrix(S)
t(S) %*% S
typeof(S)
str(S)
S = matrix(S)
str(S)
typeof(S)
s[,1\]
s[,1]
S[,1]
t(S[1])
t(S[,1])
t(S[[1]])
t(S[[1]]) %*% S[[1]]
?survfit
library(survival)
?survfit
?survreg
data(kidney)
names(kidney)
kidney
data(kidrecur)
data(kidrecurr)
library(KMsurv)
data(kidney)
names(kidney)
Load the data and the survival library#
library(survival)#
library(KMsurv)#
data(kidney)#
#
#Create a Weibull survival regression model#
kidney.model = survreg(Surv(time, delta) ~ type, data=kidney, dist='weibull')
kidney.model
summary(kidney.weibull)
summary(kidney.model)
kidney$type
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')
perc.model
summary9perc.model
summary(perc.model)
dim(kidney)
perc.model$var
solve(perc.model$var)
sqrt(perc.model$var)
perc.model$var**(0.5)
?rmvnorm
perc.model$coef
perc.model$scale
log(perc.model$scale)
perc.model$coef[["(Intercept)"]]
Create a Weibull survival regression model#
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')#
kidney.model = survreg(Surv(time, delta) ~ type, data=kidney, dist='weibull')#
#
#Apply the formula (p396 of Klein and Moeschberger) for the variance of the transformed params:#
mu = perc.model$coef[["(Intercept)"]]#
lsigma = perc.model$scale#
grad.lambda = matrix(c(exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma))), 1, 2)
grad.lambda
var.lambda = grad.lambda %*% perc.model$var %*% grad.lambda
grad.lambda = matrix(c(exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma))), 2, 1)#
var.lambda = t(grad.lambda) %*% perc.model$var %*% grad.lambda
var.lambda
grad.alpha = matrix(c(0, -exp(-lsigma)), 2, 1)#
var.alpha = t(grad.alpha) %*% perc.model$var %*% grad.alpha
var.alpha
mu = perc.model$coef[["(Intercept)"]]#
lsigma = perc.model$scale#
lambda = exp(-mu * exp(-lsigma))#
alpha = 1 / exp(lsigma)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda = matrix(c(exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma))), 2, 1)#
var.lambda = t(grad.lambda) %*% perc.model$var %*% grad.lambda#
#
grad.alpha = matrix(c(0, -exp(-lsigma)), 2, 1)#
var.alpha = t(grad.alpha) %*% perc.model$var %*% grad.alpha
alpha
lambda
sqrt#Load the data and the survival library#
library(survival)#
library(KMsurv)#
data(kidney)#
#
#Create a Weibull survival regression model#
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')#
kidney.model = survreg(Surv(time, delta) ~ type, data=kidney, dist='weibull')#
#
#Extract the parameters as lambda and alpha:#
mu = perc.model$coef[["(Intercept)"]]#
lsigma = perc.model$scale#
lambda = exp(-mu * exp(-lsigma))#
alpha = 1 / exp(lsigma)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda = matrix(c(exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma))), 2, 1)#
var.lambda = t(grad.lambda) %*% perc.model$var %*% grad.lambda#
se.lambda = sqrt(var.lambda)#
#
grad.alpha = matrix(c(0, -exp(-lsigma)), 2, 1)#
var.alpha = t(grad.alpha) %*% perc.model$var %*% grad.alpha#
se.alpha = sqrt(var.alpha)
Load the data and the survival library#
library(survival)#
library(KMsurv)#
data(kidney)#
#
#Create a Weibull survival regression model#
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')#
kidney.model = survreg(Surv(time, delta) ~ type, data=kidney, dist='weibull')#
#
#Extract the parameters as lambda and alpha:#
mu = perc.model$coef[["(Intercept)"]]#
lsigma = perc.model$scale#
lambda = exp(-mu * exp(-lsigma))#
alpha = 1 / exp(lsigma)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda = matrix(c(exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma))), 2, 1)#
var.lambda = t(grad.lambda) %*% perc.model$var %*% grad.lambda#
se.lambda = sqrt(var.lambda)#
#
grad.alpha = matrix(c(0, -exp(-lsigma)), 2, 1)#
var.alpha = t(grad.alpha) %*% perc.model$var %*% grad.alpha#
se.alpha = sqrt(var.alpha)
se.aplha
Create a Weibull survival regression model#
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')#
surg.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==1,], dist='weibull')#
#Percutaneous implantation:#
#Extract the parameters as lambda and alpha:#
mu.p = perc.model$coef[["(Intercept)"]]#
lsigma.p = perc.model$scale#
lambda.p = exp(-mu.p * exp(-lsigma.p))#
alpha.p = 1 / exp(lsigma.p)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda.p = matrix(c(exp(-lsigma.p - mu.p*exp(-lsigma.p)), mu.p * #
                            exp(-lsigma.p - mu.p*exp(-lsigma.p))), 2, 1)#
var.lambda.p = t(grad.lambda.p) %*% perc.model$var %*% grad.lambda.p#
se.lambda.p = sqrt(var.lambda.p)#
#
grad.alpha.p = matrix(c(0, -exp(-lsigma.p)), 2, 1)#
var.alpha.p = t(grad.alpha.p) %*% perc.model$var %*% grad.alpha.p#
se.alpha.p = sqrt(var.alpha.p)#
#Surgical implantation:#
#Extract the parameters as lambda and alpha:#
mu.s = perc.model$coef[["(Intercept)"]]#
lsigma.s = perc.model$scale#
lambda.s = exp(-mu.s * exp(-lsigma.s))#
alpha.s = 1 / exp(lsigma.s)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda.s = matrix(c(exp(-lsigma.s - mu.s*exp(-lsigma.s)), mu.s *#
                            exp(-lsigma.s - mu.s*exp(-lsigma.s))), 2, 1)#
var.lambda.s = t(grad.lambda.s) %*% perc.model$var %*% grad.lambda.s#
se.lambda.s = sqrt(var.lambda.s)#
#
grad.alpha.s = matrix(c(0, -exp(-lsigma.s)), 2, 1)#
var.alpha.s = t(grad.alpha.s) %*% perc.model$var %*% grad.alpha.s#
se.alpha.s = sqrt(var.alpha.s)
se.alpha.p
se.alpha.s
Surgical implantation:#
#Extract the parameters as lambda and alpha:#
mu.s = surg.model$coef[["(Intercept)"]]#
lsigma.s = surg.model$scale#
lambda.s = exp(-mu.s * exp(-lsigma.s))#
alpha.s = 1 / exp(lsigma.s)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda.s = matrix(c(exp(-lsigma.s - mu.s*exp(-lsigma.s)), mu.s *#
                            exp(-lsigma.s - mu.s*exp(-lsigma.s))), 2, 1)#
var.lambda.s = t(grad.lambda.s) %*% surg.model$var %*% grad.lambda.s#
se.lambda.s = sqrt(var.lambda.s)#
#
grad.alpha.s = matrix(c(0, -exp(-lsigma.s)), 2, 1)#
var.alpha.s = t(grad.alpha.s) %*% surg.model$var %*% grad.alpha.s#
se.alpha.s = sqrt(var.alpha.s)
se.aplha.s
se.alpha.s
salpha.s
alpha.s
alpha.p
se.lambda.s
lambda.p
se.lambda.p
alpha.p
se.alpha.p
lmbda.s
lambda.s
se.lambda.s
alpha.s
se.alpha.s
names(perc.model)
perc.model$var
(alpha.p-1)/se.alpha.p
alpha.p
se.alpha.p
(alpha.s-1)/se.alpha.s
pnorm(-20.25456)
pnorm(-4.3053)
W.s = (alpha.s-1)/se.alpha.s
W.s
perc.model[['loglik']]
perc.model[['loglik']][1]
perc.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull', scale=1)#
perc.model[['loglik']][1] - perc.model.0[['loglik']][1]
perc.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull', scale=1)#
2*(perc.model[['loglik']][1] - perc.model.0[['loglik']][1])
L.p = 2*(perc.model[['loglik']][1] - perc.model.0[['loglik']][1])
L.p
p.W.p = pchisq(W.p**2, df=1)
W.p = (alpha.p-1)/se.alpha.p #
p.W.p = pchisq(W.p**2, df=1)
p.W.p
p.W.p = 1 - pchisq(W.p**2, df=1)
pW.p
p.W.p
W.s = (alpha.s-1)/se.alpha.s #
p.W.s = 1 - pchisq(W.s**2, df=1)
p.W.s
W.s
pnorm(W.s)
pchisq(1.96**2, df=1)
p.L.p = 1-pchisq(L.p, df=1)
p.L.p
surg.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==1,], dist='weibull', scale=1)#
L.s = 2*(surg.model[['loglik']][1] - surg.model.0[['loglik']][1])#
p.L.s = 1-pchisq(L.s, df=1)#
#L.s = 7.18 => 0.008
L.s
p.L.s
predict(perc.model, newdata=data.frame(time=5))
?survreg.predict
?predict.survreg
predict(perc.model, newdata=data.frame(time=5), type='quantile')
grad = matrix(c(-exp(-lsigma - mu*exp(-lsigma)), mu * exp(-mu * exp(-lsigma) - lsigma), 0, -exp(-lsigma)), 2, 2)
grad
grad = matrix(c(-exp(-lsigma - mu*exp(-lsigma)), 0, mu * exp(-mu * exp(-lsigma) - lsigma), -exp(-lsigma)), 2, 2)
grad
t(grad) %*% perc.model$var %*% grad
var.p
se.lambda.p
se.lambda.p**2
grad.p = matrix(c(-exp(-lsigma.p - mu.p*exp(-lsigma.p)), 0, mu * exp(-mu.p * exp(-lsigma.p) - lsigma.p), -exp(-lsigma.p)), 2, 2)
t(grad.p) %*% perc.model$var %*% grad.p
t(grad.p) %*% perc.model$var %*% grad.p[1,1]
sqrt((t(grad.p) %*% perc.model$var %*% grad.p)[1,1])
grad.alpha.p
grad
grad = matrix(c(-exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma)), 0, -exp(-lsigma)), 2, 2)
t(grad) %*% perc.model$var %*% grad
grad
grad.p
grad.lambda.p
grad = matrix(c(exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma)), 0, -exp(-lsigma)), 2, 2)
t(grad) %*% perc.model$var %*% grad
se.alpha.p**2
Load the data and the survival library#
library(survival)#
library(KMsurv)#
data(kidney)#
#
#Create a Weibull survival regression model#
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')#
surg.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==1,], dist='weibull')#
#Percutaneous implantation:#
#Extract the parameters as lambda and alpha:#
mu.p = perc.model$coef[["(Intercept)"]]#
lsigma.p = perc.model$scale#
lambda.p = exp(-mu.p * exp(-lsigma.p))#
alpha.p = 1 / exp(lsigma.p)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda.p = matrix(c(-exp(-lsigma.p - mu.p*exp(-lsigma.p)), #
                            mu.p * exp(-lsigma.p - mu.p*exp(-lsigma.p))), 2, 1)#
var.lambda.p = t(grad.lambda.p) %*% perc.model$var %*% grad.lambda.p#
se.lambda.p = sqrt(var.lambda.p)#
#lambda=0.428, se.lambda=0.158#
#
grad.alpha.p = matrix(c(0, -exp(-lsigma.p)), 2, 1)#
var.alpha.p = t(grad.alpha.p) %*% perc.model$var %*% grad.alpha.p#
se.alpha.p = sqrt(var.alpha.p)#
#alpha=0.157, se.alpha=0.042#
#Surgical implantation:#
#Extract the parameters as lambda and alpha:#
mu.s = surg.model$coef[["(Intercept)"]]#
lsigma.s = surg.model$scale#
lambda.s = exp(-mu.s * exp(-lsigma.s))#
alpha.s = 1 / exp(lsigma.s)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.lambda.s = matrix(c(-exp(-lsigma.s - mu.s*exp(-lsigma.s)),#
                            mu.s * exp(-lsigma.s - mu.s*exp(-lsigma.s))), 2, 1)#
var.lambda.s = t(grad.lambda.s) %*% surg.model$var %*% grad.lambda.s#
se.lambda.s = sqrt(var.lambda.s)#
#lambda=0.182, se.lambda=0.072#
#
grad.alpha.s = matrix(c(0, -exp(-lsigma.s)), 2, 1)#
var.alpha.s = t(grad.alpha.s) %*% surg.model$var %*% grad.alpha.s#
se.alpha.s = sqrt(var.alpha.s)#
#alpha=0.534, se.alpha=0.108#
#Tests for alpha=1:#
#Percutaneous implantation:#
#Wald test:#
W.p = (alpha.p-1)/se.alpha.p #
p.W.p = 1 - pchisq(W.p**2, df=1)#
#W.p=-20.2 => p<10**(-16)#
#
#Log-likelihood test: generate a null-hypothesis model with the scale fixed at 1#
perc.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull', scale=1)#
L.p = 2*(perc.model[['loglik']][1] - perc.model.0[['loglik']][1])#
p.L.p = 1-pchisq(L.p, df=1)#
#L.p=7.18 => p=0.008#
#Surgical implantation:#
#Wald test:#
W.s = (alpha.s-1)/se.alpha.s #
p.W.s = 1 - pchisq(W.s**2, df=1)#
#W.s=-4.31 => p<10**(-4)#
#
#Log-likelihood test: generate a null-hypothesis model with the scale fixed at 1#
surg.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==1,], dist='weibull', scale=1)#
L.s = 2*(surg.model[['loglik']][1] - surg.model.0[['loglik']][1])#
p.L.s = 1-pchisq(L.s, df=1)#
#L.s=4.28 => p=0.039#
#Value of survival function at five months:#
#Percutaneous implantation:#
S.p = exp(-lambda.p * 5**alpha.p)#
grad = matrix(c(-exp(-lsigma - mu*exp(-lsigma)), mu * exp(-lsigma - mu*exp(-lsigma)), 0, -exp(-lsigma)), 2, 2)
p.W.s
W.s
p.W.p
W.p
lambda.p
se.lambda.p
se.lambda.s
lambda.s
Load the data and the survival library#
library(survival)#
library(KMsurv)#
data(kidney)#
#
#Create a Weibull survival regression model#
perc.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull')#
surg.model = survreg(Surv(time, delta)~1, data=kidney[kidney$type==1,], dist='weibull')#
#Percutaneous implantation:#
#Extract the parameters as lambda and alpha:#
mu.p = perc.model$coef[["(Intercept)"]]#
lsigma.p = perc.model$scale#
lambda.p = exp(-mu.p * exp(-lsigma.p))#
alpha.p = 1 / exp(lsigma.p)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.p = matrix(c(-exp(-lsigma.p - mu.p*exp(-lsigma.p)), #
                    mu.p * exp(-lsigma.p - mu.p*exp(-lsigma.p)), 0, -exp(-lsigma.p)), 2, 2)#
var.p = t(grad.p) %*% perc.model$var %*% grad.p#
#
se.p = sqrt(var.p[1,1])#
#lambda=0.428, se.lambda=0.054#
#
se.alpha.p = sqrt(var.p[2,2])#
#alpha=0.157, se.alpha=0.042#
#Surgical implantation:#
#Extract the parameters as lambda and alpha:#
mu.s = surg.model$coef[["(Intercept)"]]#
lsigma.s = surg.model$scale#
lambda.s = exp(-mu.s * exp(-lsigma.s))#
alpha.s = 1 / exp(lsigma.s)#
#
#Apply the delta method to get the variance of the transformed params:#
grad.s = matrix(c(-exp(-lsigma.s - mu.s*exp(-lsigma.s)),#
                    mu.s * exp(-lsigma.s - mu.s*exp(-lsigma.s)), 0, -exp(-lsigma.s)), 2, 2)#
var.s = t(grad.s) %*% surg.model$var %*% grad.s#
#
se.lambda.s = sqrt(var.s[1,1])#
#lambda=0.182, se.lambda=0.057#
#
se.alpha.s = sqrt(var.s[2,2])#
#alpha=0.534, se.alpha=0.108#
#Tests for alpha=1:#
#Percutaneous implantation:#
#Wald test:#
W.p = (alpha.p-1)/se.alpha.p #
p.W.p = 1 - pchisq(W.p**2, df=1)#
#W.p=-20.2 => p<10**(-16)#
#
#Log-likelihood test: generate a null-hypothesis model with the scale fixed at 1#
perc.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==2,], dist='weibull', scale=1)#
L.p = 2*(perc.model[['loglik']][1] - perc.model.0[['loglik']][1])#
p.L.p = 1-pchisq(L.p, df=1)#
#L.p=7.18 => p=0.008#
#Surgical implantation:#
#Wald test:#
W.s = (alpha.s-1)/se.alpha.s #
p.W.s = 1 - pchisq(W.s**2, df=1)#
#W.s=-4.31 => p<10**(-4)#
#
#Log-likelihood test: generate a null-hypothesis model with the scale fixed at 1#
surg.model.0 = survreg(Surv(time, delta)~1, data=kidney[kidney$type==1,], dist='weibull', scale=1)#
L.s = 2*(surg.model[['loglik']][1] - surg.model.0[['loglik']][1])#
p.L.s = 1-pchisq(L.s, df=1)#
#L.s=4.28 => p=0.039#
#Value of survival function at five months:#
#Percutaneous implantation:#
S.p = exp(-lambda.p * 5**alpha.p)
W.p
se.lambda.s
lambda.s
se.lambda.p
se.alpha.p
se.alpha.s
se.lambda.s
S.p
grad.surv <- function(t, a, l) {#
    return( matrix(c(-t**a * exp(-l * t**a), -l * t**a * log(t) * exp(-l * t**a)), 2, 1) )#
}
grad.surv(5, alpha.p, lambda.p)
g = grad.surv(5, alpha.p, lambda.p)
t(g) %*% var.p %*% g
sqrt(t(g) %*% var.p %*% g)
S.p
S.p = exp(-lambda.p * 5**alpha.p)#
g.p = grad.surv(5, alpha.p, lambda.p)#
se.S.p = sqrt(t(g.p) %*% var.p %*% g.p)
se.S.p
S.p=2*se.S.p
S.p = exp(-lambda.p * 5**alpha.p)
S.p-2*se.S.p
S.p+2*se.S.p
S.s = exp(-lambda.s * 5**alpha.s)#
g.s = grad.surv(5, alpha.s, lambda.s)#
se.S.s = sqrt(t(g.s) %*% var.s %*% g.s)#
#S.p=0.577, se.S.p=0.029 => 95% CI = (0.519, 0.634)
S.s
se.S.s
S.s-2*se.S.s
S.s+2*se.S.s
Simulate data for testing a GWR model:#
source("utils.r")#
library(lars)#
library(spgwr)#
#
#Set up the location grid:#
N = 20#
x = rep(0:N - N/2, each=N+1)#
y = rep(0:N - N/2, times=N+1)#
#
#Simulate the predictors independently of location:#
mu.A = 0#
sig.A = 1#
A = rnorm((N+1)**2, mu.A, sig.A)#
#
mu.B = 1#
sig.B = 2#
B = rnorm((N+1)**2, mu.B, sig.B)#
#
mu.C = -1#
sig.C = 3#
C = rnorm((N+1)**2, mu.C, sig.C)#
#
#Simulate the output variable:#
sig.err = 0.5#
out = y + A*x + B + rnorm((N+1)**2, 0, sig.err)#
#
simulated = data.frame(x, y, A, B, C, out)#
#
#Use the methods of spgwr to select a bandwidth and fit a GWR model for poverty:#
bw = gwr.sel(out~A+B+C, data=simulated, coords=cbind(x,y), adapt=FALSE, gweight=gwr.bisquare)#
gwr.sim = gwr(out~A+B+C, data=simulated, coords=cbind(x,y), bandwidth=bw, gweight=gwr.bisquare)#
#Homebrew GWR:#
df = simulated#
#
#Define which variables we'll use as predictors of poverty:#
predictors = c('A', 'B', 'C')#
output = 'out'#
f = as.formula(paste("out ~ 1 + ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
#
#Use this trick to compute the matrix of distances very quickly#
n = dim(df)[1]#
D1 = matrix(rep(df$x,n), n,n)#
D2 = matrix(rep(df$y,n), n,n)#
D = sqrt((D1-t(D1))**2 + (D2-t(D2))**2)#
#
#Use the lasso for GWR model selection:#
w.lasso.geo = list()#
coefs = list()#
diagnostics = list()#
#
for(i in 1:dim(df)[1]) {#
    w = bisquare(D[,i], bw=bw)#
#
    model = lm(f, data=df, weights=w)#
    w.eig <- eigen(diag(w))#
    w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% solve(w.eig$vectors)#
    w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[,predictors]), y=as.matrix(df[[output]]))#
    for (col in predictors) {#
        coefs[[col]] = c(coefs[[col]], model$coef[[col]])#
    }#
    coefs[['(Intercept)']] = c(coefs[['(Intercept)']], model$coef[['(Intercept)']])#
#
    diagnostics[['R2']] = c(diagnostics[['R2']], summary(model)[['r.squared']])#
    diagnostics[['sigma']] = c(diagnostics[['sigma']], summary(model)[['sigma']])#
    diagnostics[['total weight']] = c(diagnostics[['total weight']], sum(w))#
    print(i)#
}#
#
model = list(coords=df[,c('x','y')], coefs=coefs, diags=diagnostics, lasso=w.lasso.geo)
y=seq(1,100)
sum(1/factorial(y))
y=seq(0,100)
sum(1/factorial(y))
e
exp(1)
exp(1)/(exp(1)-1)
y=seq(1,100)
sum(y/factorial(y))
sum(y/factorial(y) / (exp(1)-1))
sum(exp(y)/factorial(y) / (exp(1)-1))
sum(exp(2*y)/factorial(y) / (exp(1)-1))
sum(exp(3*y)/factorial(y) / (exp(1)-1))
install.packages("knitr")
setwd("git/gwr/code")
dir()
library(spgwr)#
library(lars)#
library(maps)#
library(ggplot2)#
library(fossil)#
#extract reference data#
mapcounties <- map_data("county")#
mapstates <- map_data("state")#
#Import the plotting functions:#
setwd("~/git/gwr/code")#
source("utils.r")#
#
#Import poverty data#
pov = read.csv("~/git/gwr/data/upMidWestpov_Iowa_cluster_names.csv", header=TRUE)#
years = c('60', '70', '80', '90', '00', '06')#
column.map = list(pindpov='proportion individuals in poverty', #
    logitindpov='logit( proportion individuals in poverty )', pag='pag', pex='pex', pman='pman', #
    pserve='pserve', potprof='potprof', pwh='proportion white', pblk='proportion black', pind='pind',#
    phisp='proportion hispanic', metro='metro', pfampov='proportion families in poverty',#
    logitfampov='logit( proportion families in poverty)', pfire='pfire')#
#
#Process the poverty data so that each column appears only once and the year is added as a column.#
pov2 = list()#
for (column.name in names(column.map)) {#
    col = vector()#
    for (year in years) {#
        if (paste(column.name, year, sep="") %in% names(pov)) {#
            indx = which(names(pov)==paste(column.name, year, sep=""))#
            col = c(col, pov[,indx])#
        }#
        else { col = c(col, rep(NA, dim(pov)[1])) }#
    }#
    pov2[[column.name]] = col#
}#
#
#Find the columns we haven't yet matched:#
"%w/o%" <- function(x, y) x[!x %in% y]#
missed = names(pov) %w/o% outer(names(column.map), years, FUN=function(x, y) {paste(x, y, sep="")})#
#
for (column.name in missed) {#
    col = rep(pov[,column.name], length(years))#
    pov2[[column.name]] = col#
}#
#
#Add the year column to the pov2 data list.#
pov2[['year']] = vector()#
for (year in years) {#
    pov2[['year']] = c(pov2[['year']], rep(year, dim(pov)[1]))#
}#
#
#Convert pov2 from a list to a data frame:#
pov2 = data.frame(pov2)#
#
#Correct the Y2K bug#
pov2 = within(pov2, year <- as.numeric(as.character(year)) + 1900)#
pov2 = within(pov2, year <- ifelse(year<1960, year+100, year))#
#Set the matrix that we'll use for GWR#
#df = pov2[pov2$year==2006,]#
df = pov2#
#Define which variables we'll use as predictors of poverty:#
predictors = c('pag', 'pex', 'pman', 'pserve', 'pfire', 'potprof', 'pwh', 'pblk', 'phisp', 'metro', 'pind')#
f = as.formula(paste("logitindpov ~ ", paste(predictors, collapse="+"), sep=""))#
f2 = as.formula(paste("pindpov ~ ", paste(predictors, collapse="+"), sep=""))#
#
#Make a new variable with the name of each predictor:#
for (col in predictors) {#
    assign(col, vector())#
}#
#
model.data = pov2[,predictors]#
model.data[['logitindpov']] = pov2[['logitindpov']]#
#
#Put the locations into a more friendly format:#
loc = data.frame(x=df$x, y=df$y, county=as.character(df$COUNTY), state=as.character(df$STATE))#
loc.unique = unique(loc)#
model.locs = loc.unique[,c('county', 'state')]#
model.coords = loc.unique[,c('x', 'y')]
source("gwglmnet.sel.r")
gwglmnet.sel(formula=f2, data=df, coords=model.coords, adapt=FALSE, gweight=gwr.bisquare, longlat=TRUE)
source("utils.r")
source("utils.r")
name.var='pindpov'
paste(c("Coefficient of '", name.var, "' in a model for logitindpov"), sep='')
paste(c("Coefficient of '", name.var, "' in a model for logitindpov"), collapse='')
source("utils.r")
source("utils.r")
source("utils.r")
source("utils.r")
Import the plotting functions:#
library(plotrix)#
library(sp)#
setwd('~/git/gwr/code')#
source('matplot.r')#
#source('legend.r')#
#
#Define the bisquare weight function:#
bisquare = function(x, z, bw) {#
    ifelse( r(x=x, z=c(z[1], z[2])) < bw, (1 - (r(x=x, z=c(z[1],z[2]))/ bw)**2)**2, 0)#
}#
#
bisquare = function(R, bw) {#
    ifelse( R < bw, (1 - (R/bw)**2)**2, 0)#
}#
#
#Define the distance function#
r = function(x, z) { #
    sqrt((x[1]-z[1])**2 + (x[2]-z[2])**2)#
}#
#
#Fix an x.i and get the distance to all other x’s:#
R = function(x.i, xy.mat) {#
    R = sapply(1:dim(xy.mat)[1], FUN=function(i) {r(x.i, xy.mat[i,])} )#
    return(R)#
}#
#
W = function(x.i, xy.mat, bw) {#
    distance = R(x.i, xy.mat)#
    W = bisquare(distance, bw)#
    return(W)#
}
gwglmnet.sel(formula=f2, data=df, coords=model.coords, adapt=FALSE, gweight=gwr.bisquare, longlat=TRUE)
col.out = which(names(model.data)=='logitindpov')
reps = dim(model.data)[1]/n.unique
Compute the matrix of distances (in kilometers)#
n = dim(loc)[1]#
D = as.matrix(earth.dist(loc[,c('x','y')]),n,n)#
w = bisquare(D, bw=bw)#
#
#Do the same for just the unique locations#
n.unique = dim(model.coords)[1]#
D.unique = as.matrix(earth.dist(model.coords),n,n)#
w.unique = bisquare(D.unique, bw=bw)#
cv_error = data.frame()#
w.lasso.geo = list()#
#glmnet.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 5, length.out=5000)#
l = vector()#
col.out = which(names(model.data)=='logitindpov')#
reps = dim(model.data)[1]/n.unique
gwglmnet.sel(formula=f2, data=df, coords=model.coords, adapt=FALSE, gweight=gwr.bisquare, longlat=TRUE)
source("gwglmnet.sel.r")
gwglmnet.sel(formula=f2, data=df, coords=model.coords, adapt=FALSE, gweight=gwr.bisquare, longlat=TRUE)
gwglmnet.sel(formula=f2, data=df, coords=model.coords, adapt=FALSE, gweight=gwr.bisquare, longlat=TRUE)
source("gwglmnet.sel.r")
gwglmnet.sel(formula=f2, data=df, coords=df[,c('x','y')], adapt=FALSE, gweight=gwr.bisquare, longlat=TRUE)
Compute the matrix of distances (in kilometers)#
n = dim(loc)[1]#
D = as.matrix(earth.dist(loc[,c('x','y')]),n,n)#
w = bisquare(D, bw=bw)#
#
#Do the same for just the unique locations#
n.unique = dim(model.coords)[1]#
D.unique = as.matrix(earth.dist(model.coords),n,n)#
w.unique = bisquare(D.unique, bw=bw)#
cv_error = data.frame()#
w.lasso.geo = list()#
glmnet.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 5, length.out=5000)#
l = vector()#
col.out = which(names(model.data)=='logitindpov')#
reps = dim(model.data)[1]/n.unique#
for(i in 1:dim(model.coords)[1]) {#
    colocated = which(loc$x==model.coords$x[i] & loc$y==model.coords$y[i])#
    loow = w.unique[i,-colocated]#
#
    #model = lm(f, data=model.data[-colocated,], weights=loow)#
    w.sqrt <- diag(rep(sqrt(loow), reps))#
    #block.eig = list()#
    #block.eig[['vectors']] = matrix(0, length(loow)*reps, length(loow)*reps)#
    #block.eig[['vectors']][,1:length(loow)] = rbind(w.eig$vectors, w.eig$vectors, w.eig$vectors, w.eig$vectors, w.eig$vectors, w.eig$vectors)#
    #block.eig[['values']] = c(reps*w.eig$values, rep(0, (reps-1)*length(loow)))#
#
    #w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% t(w.eig$vectors)#
    #w.sqrt = block.eig[['vectors']] %*% diag(sqrt(block.eig[['values']])) %*% t(block.eig[['vectors']])#
    #w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-colocated,predictors]), y=w.sqrt %*% as.matrix(df$logitindpov[-colocated]))#
    glmnet.geo[[i]] = glmnet(x=as.matrix(df[-colocated, predictors]), y=as.matrix(cbind(df$pfampov[-colocated], 1-df$pfampov[-colocated])), weights=rep(loow, reps), family='binomial')#
    #l = c(l, which.min(colSums(abs(predict(w.lasso.geo[[i]], newx=model.data[colocated,-col.out], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[colocated,col.out])))/1000)#
    l = c(l, glmnet.geo[[i]][['lambda']][which.min(colSums(abs(predict(glmnet.geo[[i]], newx=as.matrix(model.data[colocated,-col.out]), type='response') - model.data[colocated,col.out])))])#
    print(i)#
}
bw = 125.314 #from gwlars.sel
Compute the matrix of distances (in kilometers)#
n = dim(loc)[1]#
D = as.matrix(earth.dist(loc[,c('x','y')]),n,n)#
w = bisquare(D, bw=bw)#
#
#Do the same for just the unique locations#
n.unique = dim(model.coords)[1]#
D.unique = as.matrix(earth.dist(model.coords),n,n)#
w.unique = bisquare(D.unique, bw=bw)#
cv_error = data.frame()#
w.lasso.geo = list()#
glmnet.geo = list()#
coefs = list()#
ss = seq(0, 1, length.out=100)#
lambda = seq(0, 5, length.out=5000)#
l = vector()#
col.out = which(names(model.data)=='logitindpov')#
reps = dim(model.data)[1]/n.unique#
for(i in 1:dim(model.coords)[1]) {#
    colocated = which(loc$x==model.coords$x[i] & loc$y==model.coords$y[i])#
    loow = w.unique[i,-colocated]#
#
    #model = lm(f, data=model.data[-colocated,], weights=loow)#
    w.sqrt <- diag(rep(sqrt(loow), reps))#
    #block.eig = list()#
    #block.eig[['vectors']] = matrix(0, length(loow)*reps, length(loow)*reps)#
    #block.eig[['vectors']][,1:length(loow)] = rbind(w.eig$vectors, w.eig$vectors, w.eig$vectors, w.eig$vectors, w.eig$vectors, w.eig$vectors)#
    #block.eig[['values']] = c(reps*w.eig$values, rep(0, (reps-1)*length(loow)))#
#
    #w.sqrt <- w.eig$vectors %*% diag(sqrt(w.eig$values)) %*% t(w.eig$vectors)#
    #w.sqrt = block.eig[['vectors']] %*% diag(sqrt(block.eig[['values']])) %*% t(block.eig[['vectors']])#
    #w.lasso.geo[[i]] = lars(x=w.sqrt %*% as.matrix(df[-colocated,predictors]), y=w.sqrt %*% as.matrix(df$logitindpov[-colocated]))#
    glmnet.geo[[i]] = glmnet(x=as.matrix(df[-colocated, predictors]), y=as.matrix(cbind(df$pfampov[-colocated], 1-df$pfampov[-colocated])), weights=rep(loow, reps), family='binomial')#
    #l = c(l, which.min(colSums(abs(predict(w.lasso.geo[[i]], newx=model.data[colocated,-col.out], s=lambda, type='fit', mode='lambda')[['fit']] - model.data[colocated,col.out])))/1000)#
    l = c(l, glmnet.geo[[i]][['lambda']][which.min(colSums(abs(predict(glmnet.geo[[i]], newx=as.matrix(model.data[colocated,-col.out]), type='response') - model.data[colocated,col.out])))])#
    print(i)#
}
